# react native
이번주에 있을 react native 활용에 들어가기 전에
react native에 대한 기본 지식을 가지고 있으면 좋을 것 같아서
codecademy에서 react native를 학습하고 정리한 내용이다.



expo를 사용한 react native


#소개
요즘 세상은 스마트폰이 세상을 지배했다고해도 과언이 아니다
Cisco는 2023년까지 전 세계적으로 57억명의 모바일 사용자가 있을 것으로 예측하고 있다.
모바일에는 andriod와 ios의 두 가지 주요 플랫폼이 있다.(이 두가지가 전체의 99.4%라고 한다)
이 두 플랫폼용 앱을 만드려면 여러 언어, 여러 도구 집합, 여러 팀을 포함하여 플랫폼별 지식이 많이 필요하며
ios의 경우 mac이 필요하다. (mac이 필요하다는 것이 도현님이 말씀하진 ios개발자에게 부딪히는 큰 장벽이다.)


#react native란?
react native는 react와 동일한 API로 빌드된 라이브러리이다. 
동일한 선언적 UI 패러다임을 사용하지만 기본 구성 요소에 직접 렌더링된다.
react에서 앱을 한 번 만들고 android 및 ios와 같은 여러 기본 플랫폼에서 실행할 수 있다.
'native'는 이름의 일부이지만 순수한 네이티브 앱 개발은 아니다. 
expo 및 react native는 여전히 앱을 실행하기 위해 javascript를 사용한다.
이 JS를 웹 엔진으로 렌더링 하는 대신 플랫폼의 실제 기본 구성요소를 사용한다.

※react native와 react의 차이, 그리고 위에서 말한 swift의 차이에 대해서는 따로 블로깅할 것이다. 



#expo와 react native
expo는 모바일 앱을 개발, 빌드, 배포 및 빠르게 반복하는데 도움이 되는 범용 react 앱을 만드는 플랫폼이다.
react native로 더욱 쉽게 개발할 수 있도록 다양한 도구를 제공한다. 
expo는 react native앱을 만드는 데 필요하지 않지만 기본 지식이 필요 없어 개발자에게 도움이 된다.



#구성요소 렌더링
Expo 및 React Native의 모든 앱은 components로 구성된다.
이러한 components는 함께 작동하는 앱의 재사용 가능한 작은 부분이다. 
이러한 각 구성 요소에는 일반적으로 단일 책임이 있다.
스타일이 지정된 텍스트를 렌더링하거나 양식을 만들기 위해 
미리 스타일이 지정된 다른 구성 요소를 렌더링하는 것과 다를 수 있다.

일반 React와 마찬가지로 앱은 모두 단일 구성 요소에서 파생된다. 
이 구성 요소는 화면에서 간단한 텍스트에 이르기까지 앱의 다른 모든 
구성 요소를 렌더링한다. 이 구성 요소를 DOM에 렌더링하는 대신 
Expo 및 React Native는 진입점이라는 개념을 사용하여 렌더링한다 .



#native rendering

React: React Native 앱을 위해 작성하는 React와 유사한 JavaScript 코드

JS 스레드: 앱 코드가 단일 JS 번들 또는 파일로 변환된다. 
React Native는 이 코드를 특수 스레드에서 실행하여 렌더링하거나 호출해야 하는 항목을 결정한다.

UI 스레드: 이 스레드는 기본적으로 실행할 작업을 수신한다. 여기에는 <Button />와 같은 기본 구성 요소 렌더링이 포함될 수 있다.
또한 센서 데이터와 같이 JS 스레드에서 요청한 데이터를 반환할 수도 있다.

기본: 기본 운영 체제는 실제로 <Button />전화기의 기본 구성 요소를 렌더링한다.



#플랫폼 간 차이점
많은 Expo 및 React Native 코드는 여러 기본 플랫폼에서 재사용할 수 있지만 몇 가지 차이점을 알고 있어야 한다.
기본 구성 요소 는 플랫폼에서 제공하는 디자인 지침으로 인해 다르게 보일 수 있다.

ios : https://developer.apple.com/design/human-interface-guidelines/
android : https://material.io/design

또한 각 플랫폼에서 제공하는 기능에도 차이가 있다. 
Apple은 앱 개발자가 "Apple로 인증" 기능을 사용하기를 원하지만 Android에서는 사용할 수 없다. 
그 때문에 네이티브 기능을 위한 통합 API를 제공하는 것이 항상 가능한 것은 아니다.



#expo와 react native의 장단점
expo 및 react native는 대규모 커뮤니티와 함께 포괄적인 프레임워크를 제공한다.
앱에서 직접 사용할 수 있는 수천 개의 미리 빌드된 패키지가 있다.
물론 모든 프레임워크와 마찬가지로 expo와 react native는 완벽하지는 않다.

1. Expo 또는 React Native로 빌드된 앱은 여러 플랫폼에서 실행할 수 있다. 즉, 대부분의 코드를 공유하면서 개발 속도가 빨라지고 유지 관리할 코드가 줄어든다.
2. 기본 기능에 대한 직접 액세스를 제공하여 개발자가 앱을 순수한 기본 앱만큼 성능을 ​​낼 수 있도록 한다.
3. Expo 및 React Native를 시작하려면 기본 웹 개발 및 기본 기본 플랫폼 이해만 있으면 된다.

하지만 일부 영역에서는 react native가 잘 작동하지 않는다.

1. 순수 네이티브 앱은 Expo 및 React Native 앱에 비해 성능 한도가 더 높다.
2. Expo 및 React Native는 기본 플랫폼 위에 있는 추상화다. 기본 플랫폼의 최신 변경 사항과 기능을 따라야 한다.
3. 복잡한 앱을 사용하려면 네이티브 코드를 최적화하고 사용자 지정해야 하는 경우가 많다. 이를 위해서는 지원해야 하는 모든 플랫폼을 잘 이해해야 한다.